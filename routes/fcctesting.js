/*
*
*
*
*
*
*
*
*
*
*
*
*       DO NOT EDIT THIS FILE
*       For FCC testing purposes!
*
*
*
*
*
*
*
*
*
*
*
*/

'use strict';

const cors = require('cors');
const fs = require('fs');
const runner = require('../test-runner');

module.exports = function(app) {

  // Rutas de cÃ³digo fuente
  app.route('/_api/server.js')
    .get((req, res, next) => {
      fs.readFile(__dirname + '/server.js', (err, data) => {
        if(err) return next(err);
        res.send(data.toString());
      });
    });

  app.route('/_api/routes/api.js')
    .get((req, res, next) => {
      fs.readFile(__dirname + '/routes/api.js', (err, data) => {
        if(err) return next(err);
        res.type('txt').send(data.toString());
      });
    });

  app.route('/_api/controllers/convertHandler.js')
    .get((req, res, next) => {
      fs.readFile(__dirname + '/controllers/convertHandler.js', (err, data) => {
        if(err) return next(err);
        res.type('txt').send(data.toString());
      });
    });

  // Endpoint de tests
  app.get('/_api/get-tests', cors(), (req, res, next) => {
    if(process.env.NODE_ENV !== 'test') {
      return res.json({ status: 'unavailable' });
    }

    // Ejecuta los tests solo la primera vez
    if(!runner.started) {
      runner.started = true;
      runner.run();
    }

    // Si ya hay resultados, los devolvemos
    if(runner.report) return res.json(testFilter(runner.report, req.query.type, req.query.n));

    // Si no hay resultados, esperamos a que termine el runner
    runner.once('done', () => {
      res.json(testFilter(runner.report, req.query.type, req.query.n));
    });
  });

  // Info de headers
  app.get('/_api/app-info', (req, res) => {
    res.json({ headers: res.getHeaders() });
  });

};

// Filtra los tests por tipo
function testFilter(tests, type, n) {
  let out;
  switch(type) {
    case 'unit':
      out = tests.filter(t => t.context.match('Unit Tests'));
      break;
    case 'functional':
      out = tests.filter(t => t.context.match('Functional Tests') && !t.title.match('#example'));
      break;
    default:
      out = tests;
  }
  if(n !== undefined) return out[n] || out;
  return out;
}